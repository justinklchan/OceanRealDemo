package com.example.root.ffttest2;

import android.Manifest;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.text.Editable;
import android.text.TextWatcher;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.Switch;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.view.WindowInsetsControllerCompat;
import androidx.core.widget.NestedScrollView;

import com.jjoe64.graphview.GraphView;

public class MainActivity extends AppCompatActivity  implements SensorEventListener {
    String[] perms = new String[]{Manifest.permission.RECORD_AUDIO, Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_EXTERNAL_STORAGE};

    private static SensorManager sensorManager;
    private Sensor accelerometer;
    private Sensor gyroscope;
    static Activity av;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Example of a call to a native method
        uiSetup();
        sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_LINEAR_ACCELERATION);
        gyroscope = sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST);
        sensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_FASTEST);

        getSupportActionBar().hide();
        hideSystemBars();

        ActivityCompat.requestPermissions(this,
                perms,
                1234);
        Constants.setup(this);

        testme();
    }

    public static void testme() {
        double [] sym = Lora.loramod(100,10,4000,48000, 0,1);

        double[] sig = FileOperations.readrawasset(av, R.raw.recv_chirp, 1);

        boolean[] selected = Fre_adaptation.select_fre_bins(sig,sig, 1000, 4000, 0);
//        select_fre_bins
    }

    public void uiSetup() {
        Constants.gview = (GraphView) findViewById(R.id.graphProd);
        Constants.gview2 = (GraphView) findViewById(R.id.graphProd2);
        Constants.gview3 = (GraphView) findViewById(R.id.graphProd3);
        Constants.sw1 = (Switch) findViewById(R.id.switch1);
        Constants.sw2 = (Switch) findViewById(R.id.switch2);
        Constants.sw3 = (Switch) findViewById(R.id.switch3);
        Constants.et1 = (EditText) findViewById(R.id.editTextNumber);
        Constants.et2 = (EditText) findViewById(R.id.editTextNumber2);
        Constants.et3 = (EditText) findViewById(R.id.editTextNumber3);
        Constants.et4 = (EditText) findViewById(R.id.editTextNumber4);
        Constants.et5 = (EditText) findViewById(R.id.editTextNumber5);
        Constants.tv4 = (TextView) findViewById(R.id.textView4);
        Constants.tv5 = (TextView) findViewById(R.id.debugPane);
        Constants.sview = (NestedScrollView) findViewById(R.id.scrollView);
        Constants.tv5.setMovementMethod(new ScrollingMovementMethod());
        Constants.startButton = (Button) findViewById(R.id.button);
        Constants.clearButton = (Button) findViewById(R.id.button2);
        Constants.tv6 = (TextView) findViewById(R.id.textView6);
        av = this;

        Constants.sw1.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                if (isChecked) {
                    editor.putString("user", Constants.User.Alice.toString());
                    Constants.user  = Constants.User.Alice;
                    Constants.sw1.setText(Constants.User.Alice.toString());
                }
                else {
                    editor.putString("user", Constants.User.Bob.toString());
                    Constants.user  = Constants.User.Bob;
                    Constants.sw1.setText(Constants.User.Bob.toString());
                }
                editor.commit();
            }
        });

        Constants.sw2.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                editor.putBoolean("decode_data", isChecked);
                Constants.DecodeData  = isChecked;
                editor.commit();
            }
        });

        Constants.sw3.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                editor.putBoolean("test", isChecked);
                Constants.TEST  = isChecked;
                editor.commit();
            }
        });

        Constants.et1.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                String ss = Constants.et1.getText().toString();
                if (ss.length()>0) {
                    try {
                        editor.putFloat("volume", Float.parseFloat(ss));
                        editor.commit();
                        Constants.volume = Float.parseFloat(ss);
                    }
                    catch(Exception e) {
                        Log.e(Constants.LOG,e.getMessage());
                    }
                }
            }
        });

        Constants.et2.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                String ss = Constants.et2.getText().toString();
                if (ss.length()>0) {
                    editor.putInt("preamble_len", Integer.parseInt(ss));
                    editor.commit();
                    Constants.preambleTime = Integer.parseInt(ss);
                }
            }
        });

        Constants.et3.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                String ss = Constants.et3.getText().toString();
                if (ss.length()>0) {
                    editor.putInt("init_sleep", Integer.parseInt(ss));
                    editor.commit();
                    Constants.initSleep = Integer.parseInt(ss);
                }
            }
        });

        Constants.et4.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                String ss = Constants.et4.getText().toString();
                if (ss.length()>0) {
                    editor.putInt("snr_thresh", Integer.parseInt(ss));
                    editor.commit();
                    Constants.SNR_THRESH = Integer.parseInt(ss);
                }
            }
        });

        Constants.et5.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
            }
            @Override
            public void beforeTextChanged(CharSequence s, int start,
                                          int count, int after) {
            }
            @Override
            public void onTextChanged(CharSequence s, int start,
                                      int before, int count) {
                SharedPreferences.Editor editor = PreferenceManager.getDefaultSharedPreferences(av).edit();
                String ss = Constants.et5.getText().toString();
                if (ss.length()>0) {
                    editor.putInt("nsyms", Integer.parseInt(ss));
                    editor.commit();
                    Constants.Nsyms = Integer.parseInt(ss);
                }
            }
        });
    }

    public void testFunctions() {
        Constants.setup(this);
        Decoder.test_decode(this);

        // test feedback signal
        short[] sig = FeedbackSignal.multi_freq_signal(new int[]{20,21},50,false);
        int[] valid_bins = FeedbackSignal.parse_signal(Utils.convert(sig));

        // test ofdm symbol generation
        short[] bits = SymbolGeneration.rand_bits(Constants.default_valid_carrier.length*2);
        SymbolGeneration.generate(bits, valid_bins,1, false);
    }

    protected void onPause() {
        super.onPause();
        sensorManager.unregisterListener(this);
    }

    protected void onResume() {
        super.onResume();
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST);
        sensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_FASTEST);
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        if (Constants.sensorFlag && Constants.imu) {
            if (event.sensor.equals(accelerometer)) {
                Constants.acc.add(event.values[0]+","+event.values[1]+","+event.values[2]+"\n");
            }
            else if (event.sensor.equals(gyroscope)) {
                Constants.gyro.add(event.values[0]+","+event.values[1]+","+event.values[2]+"\n");
            }
        }
    }

    @Override
    public void onAccuracyChanged(Sensor sensor, int i) {

    }

    public void onstart(View v) {
        Constants.ts = System.currentTimeMillis();
        Constants.tv6.setText(Utils.trimmed_ts());
        sensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_FASTEST);
        sensorManager.registerListener(this, gyroscope, SensorManager.SENSOR_DELAY_FASTEST);

//        if (Constants.user == Constants.User.Alice)
        Constants.task = new SendChirpAsyncTask(this);
        Constants.task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
    }

    @Override
    public void onWindowFocusChanged(boolean hasFocus) {
        super.onWindowFocusChanged(hasFocus);
        if (hasFocus) {
            getWindow().getDecorView().setSystemUiVisibility(
                    View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                            | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                            | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                            | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                            | View.SYSTEM_UI_FLAG_FULLSCREEN
                            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);
        }
    }

    private void hideSystemBars() {
        WindowInsetsControllerCompat windowInsetsController =
                ViewCompat.getWindowInsetsController(getWindow().getDecorView());
        if (windowInsetsController == null) {
            return;
        }
        // Configure the behavior of the hidden system bars
        windowInsetsController.setSystemBarsBehavior(
                WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
        );
        // Hide both the status bar and the navigation bar
        windowInsetsController.hide(WindowInsetsCompat.Type.systemBars());
    }

    public void clear(View v) {
        Constants.tv5.setText("");
    }

    public static void unreg(Activity av) {
        sensorManager.unregisterListener((MainActivity)av);
    }
}
